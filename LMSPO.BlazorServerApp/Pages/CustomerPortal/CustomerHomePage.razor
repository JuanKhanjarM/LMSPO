@page "/customer"
@page "/customer/{customerId:int}"


@inject ICustomersWS _ICustomersWS
@inject IPurchasedProdutsWS _IPurchasedProdutsWS
@inject NavigationManager NavigationManager
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <h4>Customer ID: @customerId : @customer.CustomerName</h4>
            <h4>Groups ( @customerG.Count() )</h4>
            <!-- Display Group cards and "Edit" button -->
            @foreach (var group in customerG)
            {
                <div class="card">
                    <!-- Display Group details -->
                    <div class="card-header">
                        @group.GroupName
                        @group.EAN
                        @group.TotalPrice.ToString("c")
                    </div>
                    <div>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Cost</th>
                                    <th>Quantity</th>
                                    <th>Sub Total</th>
                                    <!-- Add more table headers as needed -->
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var gp in group.GroupProducts)
                                {
                                    <tr>
                                        <td>@gp.ProductName</td>
                                        <td>@gp.Cost</td>
                                        <td>@gp.AddedQuantity</td>
                                        <td>@gp.SubTotal</td>
                                        <!-- Add more table cells for other properties -->
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <button class="btn btn-primary" @onclick="() => ShowGroupDetails(group.GroupId)">Edit</button>
                    </div>
                </div>
            }
        </div>
        <div class="col-md-8">
            @if (showPurchasedProducts)
            {
                <h4>PurchasedProduct Details for Customer ID: @customerId</h4>
                <!-- Add your PurchasedProduct details here -->
                <div style="position: relative; height: 100%;">
                    <!-- Content div (table) -->
                    <div style="height: calc(100% - 40px); overflow-y: auto;">
                        <PurchasedProductTableItems 
                            customerId="customerId" 
                            PurchasedProductDtos="purchasedProductDtos">

                       </PurchasedProductTableItems>
                    </div>

                    <!-- Button div (bottom right) -->
                    <div style="position: absolute; bottom: 0; right: 0;">
                        <button class="btn btn-primary" @onclick="NewGroup">Create Group</button>
                    </div>
                    <div>
                        <AddNewGroup>

                        </AddNewGroup>
                    </div>
                </div>
            }
            else
            {
                <!-- Display GroupProduct details in col-8 -->
                <h4>GroupProduct Details for Group ID: @selectedGroupId</h4>
                <GroupDetails 
                    GroupId="@selectedGroupId" 
                    customerId="customerId" />
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int customerId { get; set; }
    private bool showPurchasedProducts = true;
    private int? selectedGroupId;
    private CustomerDto? customer { get; set; } = new CustomerDto();
    private List<GroupDto> customerG { get; set; } = new List<GroupDto>();
    private List<GroupProductVM> customerGP { get; set; } = new List<GroupProductVM>();
    private List<PurchasedProductVM>? purchasedProductDtos { get; set; } = new List<PurchasedProductVM>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            customer = await _ICustomersWS.GetCustomerAsync($"Customers/{customerId}");

            if (customer != null)
            {
                customerG = customer.Groups;

                //if (customerG.Any())
                //{
                //    customerGP = customerG.First().GroupProducts;
                //}
                purchasedProductDtos = customer.PurchasedProducts;
            }
            else
            {
                // Handle the case where the customer data is null (e.g., display an error message)
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., log the error or display an error message)
            // You can also set a flag or error message to indicate a problem.
        }
    }

    private void NewGroup()
    {
        // Navigate back to the customer page
        NavigationManager.NavigateTo($"/create-group/{customerId}");
    }
    private void ShowGroupDetails(int groupId)
    {
        selectedGroupId = groupId;

        showPurchasedProducts = false;
    }
}
